--
-- API Package Body for Taxon.
--
-- Scaffold auto-generated by gen-api.pl (H.Lapp, 2002).
--
-- $Id: Taxon.pkb,v 1.1.1.2 2003-01-29 08:54:40 lapp Exp $
--

--
-- (c) Hilmar Lapp, hlapp at gnf.org, 2002.
-- (c) GNF, Genomics Institute of the Novartis Research Foundation, 2002.
--
-- You may distribute this module under the same terms as Perl.
-- Refer to the Perl Artistic License (see the license accompanying this
-- software package, or see http://www.perl.com/language/misc/Artistic.html)
-- for the terms under which you may use, modify, and redistribute this module.
-- 
-- THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
-- WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
-- MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
--

CREATE OR REPLACE
PACKAGE BODY Tax IS

taxon_cached SG_TAXON.OID%TYPE DEFAULT NULL;
cache_key VARCHAR2(128) DEFAULT NULL;

CURSOR Tax_NCBI_c (
		Tax_NCBI_TAXON_ID	IN SG_TAXON.NCBI_TAXON_ID%TYPE)
RETURN SG_TAXON%ROWTYPE IS
	SELECT t.* FROM SG_TAXON t
	WHERE
		t.NCBI_TAXON_ID = Tax_NCBI_TAXON_ID
	;

CURSOR Tax_Name_c (
		Tax_NAME	IN SG_TAXON.NAME%TYPE,
		Tax_VARIANT	IN SG_TAXON.VARIANT%TYPE)
RETURN SG_TAXON%ROWTYPE IS
	SELECT t.* FROM SG_TAXON t
	WHERE
		t.NAME = Tax_NAME
	AND	t.VARIANT = Tax_VARIANT
	;

FUNCTION get_oid(
		Tax_OID	IN SG_TAXON.OID%TYPE DEFAULT NULL,
		Tax_NAME	IN SG_TAXON.NAME%TYPE,
		Tax_VARIANT	IN SG_TAXON.VARIANT%TYPE,
		Tax_COMMON_NAME	IN SG_TAXON.COMMON_NAME%TYPE DEFAULT NULL,
		Tax_NCBI_TAXON_ID	IN SG_TAXON.NCBI_TAXON_ID%TYPE,
		Tax_FULL_LINEAGE	IN SG_TAXON.FULL_LINEAGE%TYPE DEFAULT NULL,
		do_DML		IN NUMBER DEFAULT BSStd.DML_NO)
RETURN SG_TAXON.OID%TYPE
IS
	pk	SG_TAXON.OID%TYPE DEFAULT NULL;
	Tax_row Tax_NCBI_c%ROWTYPE;
	key_str VARCHAR2(128) DEFAULT Tax_NAME || '|' || Tax_VARIANT || '|' || Tax_NCBI_TAXON_ID;
BEGIN
	-- initialize
	IF (do_DML > BSStd.DML_NO) THEN
		pk := Tax_OID;
	END IF;
	-- look up
	IF (pk IS NULL) AND (key_str = cache_key) THEN
	        pk := taxon_cached;
	ELSIF (pk IS NULL) THEN
		-- reset cache
		cache_key := NULL;
		taxon_cached := NULL;
		-- look up primary key
		IF (Tax_NCBI_TAXON_ID IS NOT NULL) THEN
			FOR Tax_row IN Tax_NCBI_c(Tax_NCBI_TAXON_ID) LOOP
				pk := Tax_row.OID;
				cache_key := key_str;
				taxon_cached := pk;
			END LOOP;
		ELSE
			-- do the look up
			FOR Tax_row IN Tax_Name_c(Tax_NAME, Tax_VARIANT) LOOP
		        	pk := Tax_row.OID;
				-- cache result
			    	cache_key := key_str;
			    	taxon_cached := pk;
			END LOOP;
		END IF;
	END IF;
	-- insert/update if requested
	IF (pk IS NULL) AND 
	   ((do_DML = BSStd.DML_I) OR (do_DML = BSStd.DML_UI)) THEN
	    	--
	    	-- insert the record and obtain the primary key
	    	pk := do_insert(
		        NAME => Tax_NAME,
			VARIANT => Tax_VARIANT,
			COMMON_NAME => Tax_COMMON_NAME,
			NCBI_TAXON_ID => Tax_NCBI_TAXON_ID,
			FULL_LINEAGE => Tax_FULL_LINEAGE);
	ELSIF (do_DML = BSStd.DML_U) OR (do_DML = BSStd.DML_UI) THEN
	        -- update the record (note that not provided FKs will not
		-- be changed nor looked up)
		do_update(
			Tax_OID	=> pk,
		        Tax_NAME => Tax_NAME,
			Tax_VARIANT => Tax_VARIANT,
			Tax_COMMON_NAME => Tax_COMMON_NAME,
			Tax_NCBI_TAXON_ID => Tax_NCBI_TAXON_ID,
			Tax_FULL_LINEAGE => Tax_FULL_LINEAGE);
	END IF;
	-- return the primary key
	RETURN pk;
END;

FUNCTION do_insert(
		NAME	IN SG_TAXON.NAME%TYPE,
		VARIANT	IN SG_TAXON.VARIANT%TYPE,
		COMMON_NAME	IN SG_TAXON.COMMON_NAME%TYPE,
		NCBI_TAXON_ID	IN SG_TAXON.NCBI_TAXON_ID%TYPE,
		FULL_LINEAGE	IN SG_TAXON.FULL_LINEAGE%TYPE)
RETURN SG_TAXON.OID%TYPE 
IS
	pk	SG_TAXON.OID%TYPE;
BEGIN
	-- pre-generate the primary key value
	SELECT SG_Sequence.nextval INTO pk FROM DUAL;
	-- insert the record
	INSERT INTO SG_TAXON (
		OID,
		NAME,
		VARIANT,
		COMMON_NAME,
		NCBI_TAXON_ID,
		FULL_LINEAGE)
	VALUES (pk,
		NAME,
		VARIANT,
		COMMON_NAME,
		NCBI_TAXON_ID,
		FULL_LINEAGE)
	;
	-- return the new pk value
	RETURN pk;
END;

PROCEDURE do_update(
		Tax_OID	IN SG_TAXON.OID%TYPE,
		Tax_NAME	IN SG_TAXON.NAME%TYPE,
		Tax_VARIANT	IN SG_TAXON.VARIANT%TYPE,
		Tax_COMMON_NAME	IN SG_TAXON.COMMON_NAME%TYPE,
		Tax_NCBI_TAXON_ID	IN SG_TAXON.NCBI_TAXON_ID%TYPE,
		Tax_FULL_LINEAGE	IN SG_TAXON.FULL_LINEAGE%TYPE)
IS
BEGIN
	-- update the record (and leave attributes passed as NULL untouched)
	UPDATE SG_TAXON t
	SET
		NAME = NVL(Tax_NAME, NAME),
		VARIANT = NVL(Tax_VARIANT, VARIANT),
		COMMON_NAME = NVL(Tax_COMMON_NAME, COMMON_NAME),
		NCBI_TAXON_ID = NVL(Tax_NCBI_TAXON_ID, NCBI_TAXON_ID),
		FULL_LINEAGE = NVL(Tax_FULL_LINEAGE, FULL_LINEAGE)
	WHERE OID = Tax_OID
	;
END;

END Tax;
/

