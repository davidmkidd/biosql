--
-- API Package Body for Bioentry_Qualifier_Assoc.
--
-- Scaffold auto-generated by gen-api.pl (H.Lapp, 2002).
--
-- $Id: Bioentry_Qualifier_Assoc.pkb,v 1.1.1.1 2002-08-13 19:51:10 lapp Exp $
--

--
-- (c) Hilmar Lapp, hlapp at gnf.org, 2002.
-- (c) GNF, Genomics Institute of the Novartis Research Foundation, 2002.
--
-- You may distribute this module under the same terms as Perl.
-- Refer to the Perl Artistic License (see the license accompanying this
-- software package, or see http://www.perl.com/language/misc/Artistic.html)
-- for the terms under which you may use, modify, and redistribute this module.
-- 
-- THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
-- WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
-- MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
--

CREATE OR REPLACE
PACKAGE BODY EntOntA IS

CURSOR EntOntA_c (
		EntOntA_ENT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ENT_OID%TYPE,
		EntOntA_ONT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ONT_OID%TYPE)
RETURN SG_BIOENTRY_QUALIFIER_ASSOC%ROWTYPE IS
	SELECT t.* FROM SG_BIOENTRY_QUALIFIER_ASSOC t
	WHERE
		Ent_Oid = EntOntA_ENT_OID
	AND     Ont_Oid = EntOntA_ONT_OID
	;

FUNCTION get_oid(
		ENT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ENT_OID%TYPE DEFAULT NULL,
		ONT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ONT_OID%TYPE DEFAULT NULL,
		EntOntA_VALUE	IN SG_BIOENTRY_QUALIFIER_ASSOC.VALUE%TYPE DEFAULT NULL,
		Ont_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE DEFAULT NULL,
		Ont_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE DEFAULT NULL,
		Ent_ACCESSION	IN SG_BIOENTRY.ACCESSION%TYPE DEFAULT NULL,
		Ent_VERSION	IN SG_BIOENTRY.VERSION%TYPE DEFAULT NULL,
		Ent_IDENTIFIER	IN SG_BIOENTRY.IDENTIFIER%TYPE DEFAULT NULL,
		DB_OID		IN SG_BIOENTRY.DB_OID%TYPE DEFAULT NULL,
		DB_NAME		IN SG_BIODATABASE.NAME%TYPE DEFAULT NULL,
		DB_ACRONYM	IN SG_BIODATABASE.ACRONYM%TYPE DEFAULT NULL,
		do_DML		IN NUMBER DEFAULT BSStd.DML_NO)
RETURN INTEGER
IS
	pk	INTEGER DEFAULT NULL;
	EntOntA_row EntOntA_c%ROWTYPE;
	ONT_OID_	SG_ONTOLOGY_TERM.OID%TYPE DEFAULT ONT_OID;
	ENT_OID_	SG_BIOENTRY.OID%TYPE DEFAULT ENT_OID;
BEGIN
	-- look up SG_ONTOLOGY_TERM
	IF (ONT_OID_ IS NULL) THEN
		ONT_OID_ := Ont.get_oid(
				Ont_NAME => Ont_NAME,
				Ont_IDENTIFIER => Ont_IDENTIFIER);
	END IF;
	-- look up SG_BIOENTRY
	IF (ENT_OID_ IS NULL) THEN
		ENT_OID_ := Ent.get_oid(
				Ent_ACCESSION => Ent_ACCESSION,
				Ent_VERSION => Ent_VERSION,
				Ent_IDENTIFIER => Ent_IDENTIFIER,
				DB_OID => DB_OID,
				DB_Name => DB_Name,
				DB_Acronym => DB_Acronym);
	END IF;
	-- look up
	FOR EntOntA_row IN EntOntA_c (Ent_Oid_, Ont_Oid_) LOOP
	        pk := 1;
	END LOOP;
	-- insert/update if requested
	IF (pk IS NULL) AND 
	   ((do_DML = BSStd.DML_I) OR (do_DML = BSStd.DML_UI)) THEN
	    	-- look up foreign keys if not provided:
		-- look up SG_ONTOLOGY_TERM successful?
		IF (ONT_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ont <' || Ont_NAME || '|' || Ont_IDENTIFIER || '>');
		END IF;
		-- look up SG_BIOENTRY successful?
		IF (ENT_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ent <' || Ent_ACCESSION || '|' || Ent_VERSION || '|' || DB_OID || '|' || Ent_IDENTIFIER || '>');
		END IF;
	    	-- insert the record and obtain the primary key
	    	pk := do_insert(
		        ENT_OID => ENT_OID_,
		        ONT_OID => ONT_OID_,
			VALUE => EntOntA_VALUE);
	ELSIF (do_DML = BSStd.DML_U) OR (do_DML = BSStd.DML_UI) THEN
	        -- update the record (note that not provided FKs will not
		-- be changed nor looked up)
		do_update(
			EntOntA_ENT_OID	=> ENT_OID_,
		        EntOntA_ONT_OID => ONT_OID_,
			EntOntA_VALUE => EntOntA_VALUE);
	END IF;
	-- return the primary key
	RETURN pk;
END;

FUNCTION do_insert(
		ENT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ENT_OID%TYPE,
		ONT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ONT_OID%TYPE,
		VALUE	IN SG_BIOENTRY_QUALIFIER_ASSOC.VALUE%TYPE)
RETURN INTEGER
IS
BEGIN
	-- insert the record
	INSERT INTO SG_BIOENTRY_QUALIFIER_ASSOC (
		ENT_OID,
		ONT_OID,
		VALUE)
	VALUES (ENT_OID,
		ONT_OID,
		VALUE)
	;
	-- return TRUE
	RETURN 1;
END;

PROCEDURE do_update(
		EntOntA_ENT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ENT_OID%TYPE,
		EntOntA_ONT_OID	IN SG_BIOENTRY_QUALIFIER_ASSOC.ONT_OID%TYPE,
		EntOntA_VALUE	IN SG_BIOENTRY_QUALIFIER_ASSOC.VALUE%TYPE)
IS
BEGIN
	-- update the record (and leave attributes passed as NULL untouched)
	UPDATE SG_BIOENTRY_QUALIFIER_ASSOC
	SET
		VALUE = NVL(EntOntA_VALUE, VALUE)
	WHERE ENT_OID = EntOntA_ENT_OID AND ONT_OID = EntOntA_ONT_OID
	;
END;

END EntOntA;
/




