--
-- API Package Body for Dbxref.
--
-- Auto-generated by gen-api.pl. gen-api.pl is
-- (c) Hilmar Lapp, lapp@gnf.org, GNF, 2002.
--
-- $Id: Dbxref.pkb,v 1.1.1.1 2003-01-29 08:54:38 lapp Exp $
--

--
-- (c) Hilmar Lapp, hlapp at gnf.org, 2002.
-- (c) GNF, Genomics Institute of the Novartis Research Foundation, 2002.
--
-- You may distribute this module under the same terms as Perl.
-- Refer to the Perl Artistic License (see the license accompanying this
-- software package, or see http://www.perl.com/language/misc/Artistic.html)
-- for the terms under which you may use, modify, and redistribute this module.
-- 
-- THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
-- WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
-- MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
--

CREATE OR REPLACE
PACKAGE BODY Dbx IS

Dbx_cached	SG_DBXREF.OID%TYPE DEFAULT NULL;
cache_key		VARCHAR2(128) DEFAULT NULL;

CURSOR Dbx_c (
		Dbx_DBNAME	IN SG_DBXREF.DBNAME%TYPE,
		Dbx_ACCESSION	IN SG_DBXREF.ACCESSION%TYPE,
		Dbx_VERSION	IN SG_DBXREF.VERSION%TYPE)
RETURN SG_DBXREF%ROWTYPE IS
	SELECT t.* FROM SG_DBXREF t
	WHERE
		t.DBNAME = Dbx_DBNAME
	AND	t.ACCESSION = Dbx_ACCESSION
	AND	t.VERSION = Dbx_VERSION
	;

FUNCTION get_oid(
		Dbx_OID	IN SG_DBXREF.OID%TYPE DEFAULT NULL,
		Dbx_DBNAME	IN SG_DBXREF.DBNAME%TYPE,
		Dbx_ACCESSION	IN SG_DBXREF.ACCESSION%TYPE,
		Dbx_VERSION	IN SG_DBXREF.VERSION%TYPE,
		do_DML		IN NUMBER DEFAULT BSStd.DML_NO)
RETURN SG_DBXREF.OID%TYPE
IS
	pk	SG_DBXREF.OID%TYPE DEFAULT NULL;
	Dbx_row Dbx_c%ROWTYPE;
	key_str	VARCHAR2(128) DEFAULT Dbx_DBNAME || '|' || Dbx_ACCESSION || '|' || Dbx_VERSION;
BEGIN
	-- initialize
	IF (do_DML > BSStd.DML_NO) THEN
		pk := Dbx_OID;
	END IF;
	-- look up
	IF pk IS NULL THEN
		IF (key_str = cache_key) THEN
			pk := Dbx_cached;
		ELSE
			-- reset cache
			cache_key := NULL;
			Dbx_cached := NULL;
			-- do the look up
			FOR Dbx_row IN Dbx_c(Dbx_DBNAME, Dbx_ACCESSION, Dbx_VERSION) LOOP
		        	pk := Dbx_row.OID;
				-- cache result
			    	cache_key := key_str;
			    	Dbx_cached := pk;
			END LOOP;
		END IF;
	END IF;
	-- insert/update if requested
	IF (pk IS NULL) AND 
	   ((do_DML = BSStd.DML_I) OR (do_DML = BSStd.DML_UI)) THEN
	    	--
	    	-- insert the record and obtain the primary key
	    	pk := do_insert(
		        DBNAME => Dbx_DBNAME,
			ACCESSION => Dbx_ACCESSION,
			VERSION => Dbx_VERSION);
	ELSIF (do_DML = BSStd.DML_U) OR (do_DML = BSStd.DML_UI) THEN
	        -- update the record (note that not provided FKs will not
		-- be changed nor looked up)
		do_update(
			Dbx_OID	=> pk,
		        Dbx_DBNAME => Dbx_DBNAME,
			Dbx_ACCESSION => Dbx_ACCESSION,
			Dbx_VERSION => Dbx_VERSION);
	END IF;
	-- return the primary key
	RETURN pk;
END;

FUNCTION do_insert(
		DBNAME	IN SG_DBXREF.DBNAME%TYPE,
		ACCESSION	IN SG_DBXREF.ACCESSION%TYPE,
		VERSION	IN SG_DBXREF.VERSION%TYPE)
RETURN SG_DBXREF.OID%TYPE 
IS
	pk	SG_DBXREF.OID%TYPE;
BEGIN
	-- pre-generate the primary key value
	SELECT SG_Sequence.nextval INTO pk FROM DUAL;
	-- insert the record
	INSERT INTO SG_DBXREF (
		OID,
		DBNAME,
		ACCESSION,
		VERSION)
	VALUES (pk,
		DBNAME,
		ACCESSION,
		VERSION)
	;
	-- return the new pk value
	RETURN pk;
END;

PROCEDURE do_update(
		Dbx_OID	IN SG_DBXREF.OID%TYPE,
		Dbx_DBNAME	IN SG_DBXREF.DBNAME%TYPE,
		Dbx_ACCESSION	IN SG_DBXREF.ACCESSION%TYPE,
		Dbx_VERSION	IN SG_DBXREF.VERSION%TYPE)
IS
BEGIN
	-- update the record (and leave attributes passed as NULL untouched)
	UPDATE SG_DBXREF
	SET
		DBNAME = NVL(Dbx_DBNAME, DBNAME),
		ACCESSION = NVL(Dbx_ACCESSION, ACCESSION),
		VERSION = NVL(Dbx_VERSION, VERSION)
	WHERE OID = Dbx_OID
	;
END;

END Dbx;
/

