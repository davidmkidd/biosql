--
-- API Package Body for Seqfeature.
--
-- Scaffold auto-generated by gen-api.pl (H.Lapp, 2002).
--
-- $Id: Seqfeature.pkb,v 1.1.1.2 2003-01-29 08:54:39 lapp Exp $
--

--
-- (c) Hilmar Lapp, hlapp at gnf.org, 2002.
-- (c) GNF, Genomics Institute of the Novartis Research Foundation, 2002.
--
-- You may distribute this module under the same terms as Perl.
-- Refer to the Perl Artistic License (see the license accompanying this
-- software package, or see http://www.perl.com/language/misc/Artistic.html)
-- for the terms under which you may use, modify, and redistribute this module.
-- 
-- THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
-- WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
-- MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
--

CREATE OR REPLACE
PACKAGE BODY Fea IS

Fea_cached SG_SEQFEATURE.OID%TYPE DEFAULT NULL;
cache_key VARCHAR2(128) DEFAULT NULL;

CURSOR Fea_c (
		Fea_ENT_OID	IN SG_SEQFEATURE.ENT_OID%TYPE,
		Fea_ONT_OID	IN SG_SEQFEATURE.ONT_OID%TYPE,
		Fea_FSRC_OID	IN SG_SEQFEATURE.FSRC_OID%TYPE,
		Fea_RANK	IN SG_SEQFEATURE.RANK%TYPE)
RETURN SG_SEQFEATURE%ROWTYPE IS
	SELECT t.* FROM SG_SEQFEATURE t
	WHERE
		t.ENT_OID = Fea_ENT_OID
	AND	t.ONT_OID = Fea_ONT_OID
	AND	t.FSRC_OID = Fea_FSRC_OID
	AND	t.RANK = Fea_RANK
	;

FUNCTION get_oid(
		Fea_OID	IN SG_SEQFEATURE.OID%TYPE DEFAULT NULL,
		Fea_RANK	IN SG_SEQFEATURE.RANK%TYPE,
		ENT_OID	IN SG_SEQFEATURE.ENT_OID%TYPE,
		ONT_OID	IN SG_SEQFEATURE.ONT_OID%TYPE,
		FSRC_OID	IN SG_SEQFEATURE.FSRC_OID%TYPE DEFAULT NULL,
		Ont_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE DEFAULT NULL,
		Ont_CAT_OID	IN SG_ONTOLOGY_TERM.ONT_OID%TYPE DEFAULT NULL,
		Ont_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE DEFAULT NULL,
		FSrc_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE DEFAULT NULL,
		FSrc_Cat_OID	IN SG_ONTOLOGY_TERM.ONT_OID%TYPE DEFAULT NULL,
		FSrc_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE DEFAULT NULL,
		DB_OID		IN SG_BIOENTRY.DB_OID%TYPE DEFAULT NULL,
		Ent_ACCESSION	IN SG_BIOENTRY.ACCESSION%TYPE DEFAULT NULL,
		Ent_VERSION	IN SG_BIOENTRY.VERSION%TYPE DEFAULT NULL,
		Ent_IDENTIFIER	IN SG_BIOENTRY.IDENTIFIER%TYPE DEFAULT NULL,
		do_DML		IN NUMBER DEFAULT BSStd.DML_NO)
RETURN SG_SEQFEATURE.OID%TYPE
IS
	pk	SG_SEQFEATURE.OID%TYPE DEFAULT NULL;
	Fea_row Fea_c%ROWTYPE;
	FSRC_OID_	SG_ONTOLOGY_TERM.OID%TYPE DEFAULT FSRC_OID;
	ENT_OID_	SG_BIOENTRY.OID%TYPE DEFAULT ENT_OID;
	ONT_OID_	SG_ONTOLOGY_TERM.OID%TYPE DEFAULT ONT_OID;
	key_str	VARCHAR2(128) DEFAULT ENT_OID || '|' || ONT_OID || '|' || FSRC_OID || '|' || Fea_RANK;
BEGIN
	-- initialize
	IF (do_DML > BSStd.DML_NO) THEN
		pk := Fea_OID;
	END IF;
	-- look up SG_BIOENTRY
	IF (ENT_OID_ IS NULL) THEN
		ENT_OID_ := Ent.get_oid(
				Ent_ACCESSION => Ent_ACCESSION,
				Ent_VERSION => Ent_VERSION,
				DB_OID => DB_OID,
				Ent_IDENTIFIER => Ent_IDENTIFIER);
	END IF;
	-- look up SG_ONTOLOGY_TERM
	IF (ONT_OID_ IS NULL) THEN
		ONT_OID_ := Ont.get_oid(
				Ont_NAME => Ont_NAME,
				Ont_IDENTIFIER => Ont_IDENTIFIER,
				Ont_Cat_Oid => Ont_Cat_Oid);
	END IF;
	-- look up SG_ONTOLOGY_TERM
	IF (FSrc_OID_ IS NULL) THEN
		FSrc_OID_ := Ont.get_oid(
				Ont_NAME => FSrc_NAME,
				Ont_IDENTIFIER => FSrc_IDENTIFIER,
				Ont_Cat_Oid => FSrc_Cat_Oid);
	END IF;
	-- look up
	IF pk IS NULL THEN
		IF (key_str = cache_key) THEN
			pk := Fea_cached;
		ELSE
			-- reset cache
			cache_key := NULL;
			Fea_cached := NULL;
			-- do the look up
			FOR Fea_row IN Fea_c(ENT_OID_, ONT_OID_, FSrc_Oid_, Fea_RANK) LOOP
		        	pk := Fea_row.OID;
				-- cache result
			    	cache_key := key_str;
			    	Fea_cached := pk;
			END LOOP;
		END IF;
	END IF;
	-- insert/update if requested
	IF (pk IS NULL) AND 
	   ((do_DML = BSStd.DML_I) OR (do_DML = BSStd.DML_UI)) THEN
		-- look up SG_BIOENTRY successful?
		IF (ENT_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ent <' || Ent_ACCESSION || '|' || Ent_VERSION || '|' || DB_OID || '|' || Ent_IDENTIFIER || '>');
		END IF;
		-- look up SG_ONTOLOGY_TERM successful?
		IF (ONT_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ont <' || Ont_NAME || '|' || Ont_Cat_OID || '|' || Ont_IDENTIFIER || '>');
		END IF;
		-- look up SG_SEQFEATURE_SOURCE successful?
		IF (FSRC_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ont <' || FSrc_NAME || '|' || FSrc_Cat_OID || '|' || FSrc_IDENTIFIER || '>');
		END IF;
	    	-- insert the record and obtain the primary key
	    	pk := do_insert(
		        RANK => Fea_RANK,
			ENT_OID => ENT_OID_,
			ONT_OID => ONT_OID_,
			FSRC_OID => FSRC_OID_);
	ELSIF (do_DML = BSStd.DML_U) OR (do_DML = BSStd.DML_UI) THEN
	        -- update the record (note that not provided FKs will not
		-- be changed nor looked up)
		do_update(
			Fea_OID	=> pk,
		        Fea_RANK => Fea_RANK,
			Fea_ENT_OID => ENT_OID_,
			Fea_ONT_OID => ONT_OID_,
			Fea_FSRC_OID => FSRC_OID_);
	END IF;
	-- return the primary key
	RETURN pk;
END;

FUNCTION do_insert(
		RANK	IN SG_SEQFEATURE.RANK%TYPE,
		ENT_OID	IN SG_SEQFEATURE.ENT_OID%TYPE,
		ONT_OID	IN SG_SEQFEATURE.ONT_OID%TYPE,
		FSRC_OID	IN SG_SEQFEATURE.FSRC_OID%TYPE)
RETURN SG_SEQFEATURE.OID%TYPE 
IS
	pk	SG_SEQFEATURE.OID%TYPE;
BEGIN
	-- pre-generate the primary key value
	SELECT SG_Sequence.nextval INTO pk FROM DUAL;
	-- insert the record
	INSERT INTO SG_SEQFEATURE (
		OID,
		RANK,
		ENT_OID,
		ONT_OID,
		FSRC_OID)
	VALUES (pk,
		RANK,
		ENT_OID,
		ONT_OID,
		FSRC_OID)
	;
	-- return the new pk value
	RETURN pk;
END;

PROCEDURE do_update(
		Fea_OID	IN SG_SEQFEATURE.OID%TYPE,
		Fea_RANK	IN SG_SEQFEATURE.RANK%TYPE,
		Fea_ENT_OID	IN SG_SEQFEATURE.ENT_OID%TYPE,
		Fea_ONT_OID	IN SG_SEQFEATURE.ONT_OID%TYPE,
		Fea_FSRC_OID	IN SG_SEQFEATURE.FSRC_OID%TYPE)
IS
BEGIN
	-- update the record (and leave attributes passed as NULL untouched)
	UPDATE SG_SEQFEATURE
	SET
		RANK = NVL(Fea_RANK, RANK),
		ENT_OID = NVL(Fea_ENT_OID, ENT_OID),
		ONT_OID = NVL(Fea_ONT_OID, ONT_OID),
		FSRC_OID = NVL(Fea_FSRC_OID, FSRC_OID)
	WHERE OID = Fea_OID
	;
END;

END Fea;
/

