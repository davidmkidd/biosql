--
-- API Package Body for Ontology_Term.
--
-- Scaffold auto-generated by gen-api.pl (H.Lapp, 2002).
--
-- $Id: Ontology_Term.pkb,v 1.1.1.1 2002-08-13 19:51:10 lapp Exp $
--

--
-- (c) Hilmar Lapp, hlapp at gnf.org, 2002.
-- (c) GNF, Genomics Institute of the Novartis Research Foundation, 2002.
--
-- You may distribute this module under the same terms as Perl.
-- Refer to the Perl Artistic License (see the license accompanying this
-- software package, or see http://www.perl.com/language/misc/Artistic.html)
-- for the terms under which you may use, modify, and redistribute this module.
-- 
-- THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
-- WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
-- MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
--

CREATE OR REPLACE
PACKAGE BODY Ont IS

ont_cached SG_ONTOLOGY_TERM.OID%TYPE DEFAULT NULL;
cache_key VARCHAR2(128) DEFAULT NULL;

CURSOR Ont_c (
		Ont_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE,
		Ont_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE)
RETURN SG_ONTOLOGY_TERM%ROWTYPE IS
	SELECT t.* FROM SG_ONTOLOGY_TERM t
	WHERE
		t.NAME = Ont_NAME
	OR	t.IDENTIFIER = Ont_IDENTIFIER
	;

FUNCTION get_oid(
		Ont_OID	IN SG_ONTOLOGY_TERM.OID%TYPE DEFAULT NULL,
		Ont_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE,
		Ont_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE,
		Ont_DEFINITION	IN SG_ONTOLOGY_TERM.DEFINITION%TYPE DEFAULT NULL,
		do_DML		IN NUMBER DEFAULT BSStd.DML_NO)
RETURN SG_ONTOLOGY_TERM.OID%TYPE
IS
	pk	SG_ONTOLOGY_TERM.OID%TYPE DEFAULT NULL;
	Ont_row Ont_c%ROWTYPE;
	key_str VARCHAR2(128) DEFAULT Ont_NAME || '|' || Ont_Identifier;
BEGIN
	-- initialize
	IF (do_DML > BSStd.DML_NO) THEN
		pk := Ont_OID;
	END IF;
	-- look up
	IF pk IS NULL THEN
		IF (key_str = cache_key) THEN
		        pk := ont_cached;
		ELSE
			-- reset cache
			cache_key := NULL;
			ont_cached := NULL;
			-- look up primary key
			FOR Ont_row IN Ont_c(Ont_NAME, Ont_IDENTIFIER) LOOP
			    pk := Ont_row.OID;
			    cache_key := key_str;
			    ont_cached := pk;
			END LOOP;
		END IF;
	END IF;
	-- insert/update if requested
	IF (pk IS NULL) AND 
	   ((do_DML = BSStd.DML_I) OR (do_DML = BSStd.DML_UI)) THEN
	    	--
	    	-- insert the record and obtain the primary key
	    	pk := do_insert(
		        NAME => Ont_NAME,
			IDENTIFIER => Ont_IDENTIFIER,
			DEFINITION => Ont_DEFINITION);
	ELSIF (do_DML = BSStd.DML_U) OR (do_DML = BSStd.DML_UI) THEN
	        -- update the record (note that not provided FKs will not
		-- be changed nor looked up)
		do_update(
			Ont_OID	=> pk,
		        Ont_NAME => Ont_NAME,
			Ont_IDENTIFIER => Ont_IDENTIFIER,
			Ont_DEFINITION => Ont_DEFINITION);
	END IF;
	-- return the primary key
	RETURN pk;
END;

FUNCTION do_insert(
		NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE,
		IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE,
		DEFINITION	IN SG_ONTOLOGY_TERM.DEFINITION%TYPE)
RETURN SG_ONTOLOGY_TERM.OID%TYPE 
IS
	pk	SG_ONTOLOGY_TERM.OID%TYPE;
BEGIN
	-- pre-generate the primary key value
	SELECT SG_Sequence.nextval INTO pk FROM DUAL;
	-- insert the record
	INSERT INTO SG_ONTOLOGY_TERM (
		OID,
		NAME,
		IDENTIFIER,
		DEFINITION)
	VALUES (pk,
		NAME,
		IDENTIFIER,
		DEFINITION)
	;
	-- return the new pk value
	RETURN pk;
END;

PROCEDURE do_update(
		Ont_OID	IN SG_ONTOLOGY_TERM.OID%TYPE,
		Ont_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE,
		Ont_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE,
		Ont_DEFINITION	IN SG_ONTOLOGY_TERM.DEFINITION%TYPE)
IS
BEGIN
	-- update the record (and leave attributes passed as NULL untouched)
	UPDATE SG_ONTOLOGY_TERM
	SET
		NAME = NVL(Ont_NAME, NAME),
		IDENTIFIER = NVL(Ont_IDENTIFIER, IDENTIFIER),
		DEFINITION = NVL(Ont_DEFINITION, DEFINITION)
	WHERE OID = Ont_OID
	;
END;

END Ont;
/

