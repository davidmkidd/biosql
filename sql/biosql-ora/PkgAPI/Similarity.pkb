--
-- API Package Body for Similarity.
--
-- Scaffold auto-generated by gen-api.pl (H.Lapp, 2002).
--
-- $Id: Similarity.pkb,v 1.1.1.2 2003-01-29 08:54:40 lapp Exp $
--

--
-- (c) Hilmar Lapp, hlapp at gnf.org, 2002.
-- (c) GNF, Genomics Institute of the Novartis Research Foundation, 2002.
--
-- You may distribute this module under the same terms as Perl.
-- Refer to the Perl Artistic License (see the license accompanying this
-- software package, or see http://www.perl.com/language/misc/Artistic.html)
-- for the terms under which you may use, modify, and redistribute this module.
-- 
-- THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
-- WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
-- MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
--

CREATE OR REPLACE
PACKAGE BODY Sim IS

CURSOR Sim_c (
		Sim_OID	IN SG_SIMILARITY.OID%TYPE)
RETURN SG_SIMILARITY%ROWTYPE IS
	SELECT t.* FROM SG_SIMILARITY t
	WHERE
		OID = Sim_OID
	;

FUNCTION get_oid(
		Sim_OID	IN SG_SIMILARITY.OID%TYPE DEFAULT NULL,
		Sim_SCORE	IN SG_SIMILARITY.SCORE%TYPE DEFAULT NULL,
		Sim_EXPECT_MANTISSA	IN SG_SIMILARITY.EXPECT_MANTISSA%TYPE DEFAULT NULL,
		Sim_EXPECT_EXPONENT	IN SG_SIMILARITY.EXPECT_EXPONENT%TYPE DEFAULT NULL,
		Sim_PCT_IDENTITY	IN SG_SIMILARITY.PCT_IDENTITY%TYPE DEFAULT NULL,
		Sim_PCT_COVERAGE	IN SG_SIMILARITY.PCT_COVERAGE%TYPE DEFAULT NULL,
		Sim_SRC_START_POS	IN SG_SIMILARITY.SRC_START_POS%TYPE DEFAULT NULL,
		Sim_SRC_END_POS	IN SG_SIMILARITY.SRC_END_POS%TYPE DEFAULT NULL,
		Sim_SRC_STRAND	IN SG_SIMILARITY.SRC_STRAND%TYPE DEFAULT NULL,
		Sim_SRC_FRAME	IN SG_SIMILARITY.SRC_FRAME%TYPE DEFAULT NULL,
		Sim_TGT_START_POS	IN SG_SIMILARITY.TGT_START_POS%TYPE DEFAULT NULL,
		Sim_TGT_END_POS	IN SG_SIMILARITY.TGT_END_POS%TYPE DEFAULT NULL,
		Sim_TGT_STRAND	IN SG_SIMILARITY.TGT_STRAND%TYPE DEFAULT NULL,
		Sim_TGT_FRAME	IN SG_SIMILARITY.TGT_FRAME%TYPE DEFAULT NULL,
		ONT_OID	IN SG_BIOENTRY_ASSOC.ONT_OID%TYPE DEFAULT NULL,
		TGT_ENT_OID	IN SG_BIOENTRY_ASSOC.TGT_ENT_OID%TYPE DEFAULT NULL,
		SRC_ENT_OID	IN SG_BIOENTRY_ASSOC.SRC_ENT_OID%TYPE DEFAULT NULL,
		Ont_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE DEFAULT NULL,
		Ont_CAT_OID	IN SG_ONTOLOGY_TERM.ONT_OID%TYPE DEFAULT NULL,
		Ont_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE DEFAULT NULL,
		Tgt_Ent_ACCESSION	IN SG_BIOENTRY.ACCESSION%TYPE DEFAULT NULL,
		Tgt_Ent_VERSION	IN SG_BIOENTRY.VERSION%TYPE DEFAULT NULL,
		Tgt_DB_OID	IN SG_BIOENTRY.DB_OID%TYPE DEFAULT NULL,
		Tgt_Ent_IDENTIFIER	IN SG_BIOENTRY.IDENTIFIER%TYPE DEFAULT NULL,
		Src_Ent_ACCESSION	IN SG_BIOENTRY.ACCESSION%TYPE DEFAULT NULL,
		Src_Ent_VERSION	IN SG_BIOENTRY.VERSION%TYPE DEFAULT NULL,
		Src_DB_OID	IN SG_BIOENTRY.DB_OID%TYPE DEFAULT NULL,
		Src_Ent_IDENTIFIER	IN SG_BIOENTRY.IDENTIFIER%TYPE DEFAULT NULL,
		do_DML		IN NUMBER DEFAULT BSStd.DML_NO)
RETURN SG_SIMILARITY.OID%TYPE
IS
	pk	SG_SIMILARITY.OID%TYPE DEFAULT NULL;
	Sim_row Sim_c%ROWTYPE;
	OID_	SG_BIOENTRY_ASSOC.OID%TYPE DEFAULT Sim_OID;
BEGIN
	-- look up
	IF OID_ IS NOT NULL THEN
		FOR Sim_row IN Sim_c (OID_) LOOP
		        pk := Sim_row.OID;
		END LOOP;
	END IF;
	-- insert/update if requested
	IF (pk IS NULL) AND 
	   ((do_DML = BSStd.DML_I) OR (do_DML = BSStd.DML_UI)) THEN
	    	-- look up foreign keys if not provided:
		-- look up SG_BIOENTRY_ASSOC (this is essentially the
		-- base class)
		IF (OID_ IS NULL) THEN
			OID_ := EntA.get_oid(
				ONT_OID            => ONT_OID,
				TGT_ENT_OID        => TGT_ENT_OID,
				SRC_ENT_OID        => SRC_ENT_OID,
				Ont_NAME           => Ont_NAME, 
				Ont_CAT_OID        => Ont_CAT_OID, 
				Ont_IDENTIFIER     => Ont_IDENTIFIER,
				Tgt_Ent_ACCESSION  => Tgt_Ent_ACCESSION,
				Tgt_Ent_VERSION    => Tgt_Ent_VERSION,
				Tgt_DB_OID         => Tgt_DB_OID,  
				Tgt_Ent_IDENTIFIER => Tgt_Ent_IDENTIFIER,
				Src_Ent_ACCESSION  => Src_Ent_ACCESSION,
				Src_Ent_VERSION    => Src_Ent_VERSION,
				Src_DB_OID         => Src_DB_OID,  
				Src_Ent_IDENTIFIER => Src_Ent_IDENTIFIER,
				do_DML		   => do_DML);
		END IF;
		IF (OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up EntA');
		END IF;
	    	-- insert the record and obtain the primary key
	    	pk := do_insert(
			OID => OID_,
		        SCORE => Sim_SCORE,
			EXPECT_MANTISSA => Sim_EXPECT_MANTISSA,
			EXPECT_EXPONENT => Sim_EXPECT_EXPONENT,
			PCT_IDENTITY => Sim_PCT_IDENTITY,
			PCT_COVERAGE => Sim_PCT_COVERAGE,
			SRC_START_POS => Sim_SRC_START_POS,
			SRC_END_POS => Sim_SRC_END_POS,
			SRC_STRAND => Sim_SRC_STRAND,
			SRC_FRAME => Sim_SRC_FRAME,
			TGT_START_POS => Sim_TGT_START_POS,
			TGT_END_POS => Sim_TGT_END_POS,
			TGT_STRAND => Sim_TGT_STRAND,
			TGT_FRAME => Sim_TGT_FRAME);
	ELSIF (do_DML = BSStd.DML_U) OR (do_DML = BSStd.DML_UI) THEN
	        -- update the record (note that not provided FKs will not
		-- be changed nor looked up)
		do_update(
			Sim_OID	=> pk,
		        Sim_SCORE => Sim_SCORE,
			Sim_EXPECT_MANTISSA => Sim_EXPECT_MANTISSA,
			Sim_EXPECT_EXPONENT => Sim_EXPECT_EXPONENT,
			Sim_PCT_IDENTITY => Sim_PCT_IDENTITY,
			Sim_PCT_COVERAGE => Sim_PCT_COVERAGE,
			Sim_SRC_START_POS => Sim_SRC_START_POS,
			Sim_SRC_END_POS => Sim_SRC_END_POS,
			Sim_SRC_STRAND => Sim_SRC_STRAND,
			Sim_SRC_FRAME => Sim_SRC_FRAME,
			Sim_TGT_START_POS => Sim_TGT_START_POS,
			Sim_TGT_END_POS => Sim_TGT_END_POS,
			Sim_TGT_STRAND => Sim_TGT_STRAND,
			Sim_TGT_FRAME => Sim_TGT_FRAME);
	END IF;
	-- return the primary key
	RETURN pk;
END;

FUNCTION do_insert(
		OID	IN SG_SIMILARITY.OID%TYPE,
		SCORE	IN SG_SIMILARITY.SCORE%TYPE,
		EXPECT_MANTISSA	IN SG_SIMILARITY.EXPECT_MANTISSA%TYPE,
		EXPECT_EXPONENT	IN SG_SIMILARITY.EXPECT_EXPONENT%TYPE,
		PCT_IDENTITY	IN SG_SIMILARITY.PCT_IDENTITY%TYPE,
		PCT_COVERAGE	IN SG_SIMILARITY.PCT_COVERAGE%TYPE,
		SRC_START_POS	IN SG_SIMILARITY.SRC_START_POS%TYPE,
		SRC_END_POS	IN SG_SIMILARITY.SRC_END_POS%TYPE,
		SRC_STRAND	IN SG_SIMILARITY.SRC_STRAND%TYPE,
		SRC_FRAME	IN SG_SIMILARITY.SRC_FRAME%TYPE,
		TGT_START_POS	IN SG_SIMILARITY.TGT_START_POS%TYPE,
		TGT_END_POS	IN SG_SIMILARITY.TGT_END_POS%TYPE,
		TGT_STRAND	IN SG_SIMILARITY.TGT_STRAND%TYPE,
		TGT_FRAME	IN SG_SIMILARITY.TGT_FRAME%TYPE)
RETURN SG_SIMILARITY.OID%TYPE 
IS
BEGIN
	-- insert the record
	INSERT INTO SG_SIMILARITY (
		OID,
		SCORE,
		EXPECT_MANTISSA,
		EXPECT_EXPONENT,
		PCT_IDENTITY,
		PCT_COVERAGE,
		SRC_START_POS,
		SRC_END_POS,
		SRC_STRAND,
		SRC_FRAME,
		TGT_START_POS,
		TGT_END_POS,
		TGT_STRAND,
		TGT_FRAME)
	VALUES (OID,
		SCORE,
		EXPECT_MANTISSA,
		EXPECT_EXPONENT,
		PCT_IDENTITY,
		PCT_COVERAGE,
		SRC_START_POS,
		SRC_END_POS,
		SRC_STRAND,
		SRC_FRAME,
		TGT_START_POS,
		TGT_END_POS,
		TGT_STRAND,
		TGT_FRAME)
	;
	-- return the new pk value
	RETURN OID;
END;

PROCEDURE do_update(
		Sim_OID	IN SG_SIMILARITY.OID%TYPE,
		Sim_SCORE	IN SG_SIMILARITY.SCORE%TYPE,
		Sim_EXPECT_MANTISSA	IN SG_SIMILARITY.EXPECT_MANTISSA%TYPE,
		Sim_EXPECT_EXPONENT	IN SG_SIMILARITY.EXPECT_EXPONENT%TYPE,
		Sim_PCT_IDENTITY	IN SG_SIMILARITY.PCT_IDENTITY%TYPE,
		Sim_PCT_COVERAGE	IN SG_SIMILARITY.PCT_COVERAGE%TYPE,
		Sim_SRC_START_POS	IN SG_SIMILARITY.SRC_START_POS%TYPE,
		Sim_SRC_END_POS	IN SG_SIMILARITY.SRC_END_POS%TYPE,
		Sim_SRC_STRAND	IN SG_SIMILARITY.SRC_STRAND%TYPE,
		Sim_SRC_FRAME	IN SG_SIMILARITY.SRC_FRAME%TYPE,
		Sim_TGT_START_POS	IN SG_SIMILARITY.TGT_START_POS%TYPE,
		Sim_TGT_END_POS	IN SG_SIMILARITY.TGT_END_POS%TYPE,
		Sim_TGT_STRAND	IN SG_SIMILARITY.TGT_STRAND%TYPE,
		Sim_TGT_FRAME	IN SG_SIMILARITY.TGT_FRAME%TYPE)
IS
BEGIN
	-- update the record (and leave attributes passed as NULL untouched)
	UPDATE SG_SIMILARITY
	SET
		SCORE = NVL(Sim_SCORE, SCORE),
		EXPECT_MANTISSA = NVL(Sim_EXPECT_MANTISSA, EXPECT_MANTISSA),
		EXPECT_EXPONENT = NVL(Sim_EXPECT_EXPONENT, EXPECT_EXPONENT),
		PCT_IDENTITY = NVL(Sim_PCT_IDENTITY, PCT_IDENTITY),
		PCT_COVERAGE = NVL(Sim_PCT_COVERAGE, PCT_COVERAGE),
		SRC_START_POS = NVL(Sim_SRC_START_POS, SRC_START_POS),
		SRC_END_POS = NVL(Sim_SRC_END_POS, SRC_END_POS),
		SRC_STRAND = NVL(Sim_SRC_STRAND, SRC_STRAND),
		SRC_FRAME = NVL(Sim_SRC_FRAME, SRC_FRAME),
		TGT_START_POS = NVL(Sim_TGT_START_POS, TGT_START_POS),
		TGT_END_POS = NVL(Sim_TGT_END_POS, TGT_END_POS),
		TGT_STRAND = NVL(Sim_TGT_STRAND, TGT_STRAND),
		TGT_FRAME = NVL(Sim_TGT_FRAME, TGT_FRAME)
	WHERE OID = Sim_OID
	;
END;

END Sim;
/

