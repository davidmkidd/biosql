--
-- API Package Body for Bioentry_Assoc.
--
-- Scaffold auto-generated by gen-api.pl (H.Lapp, 2002).
--
-- $Id: Bioentry_Assoc.pkb,v 1.1.1.1 2002-08-13 19:51:10 lapp Exp $
--

--
-- (c) Hilmar Lapp, hlapp at gnf.org, 2002.
-- (c) GNF, Genomics Institute of the Novartis Research Foundation, 2002.
--
-- You may distribute this module under the same terms as Perl.
-- Refer to the Perl Artistic License (see the license accompanying this
-- software package, or see http://www.perl.com/language/misc/Artistic.html)
-- for the terms under which you may use, modify, and redistribute this module.
-- 
-- THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
-- WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
-- MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
--

CREATE OR REPLACE
PACKAGE BODY EntA IS

CURSOR EntA_c (
		EntA_ONT_OID IN SG_BIOENTRY_ASSOC.ONT_OID%TYPE,
		EntA_SRC_ENT_OID IN SG_BIOENTRY_ASSOC.SRC_ENT_OID%TYPE,
		EntA_TGT_ENT_OID IN SG_BIOENTRY_ASSOC.TGT_ENT_OID%TYPE)
RETURN SG_BIOENTRY_ASSOC%ROWTYPE IS
	SELECT t.* FROM SG_BIOENTRY_ASSOC t
	WHERE
		t.Ont_Oid = EntA_Ont_Oid
	AND	t.Src_Ent_Oid = EntA_Src_Ent_Oid
	AND	t.Tgt_Ent_Oid = EntA_Tgt_Ent_Oid
	;

FUNCTION get_oid(
		EntA_OID	IN SG_BIOENTRY_ASSOC.OID%TYPE DEFAULT NULL,
		ONT_OID	IN SG_BIOENTRY_ASSOC.ONT_OID%TYPE DEFAULT NULL,
		TGT_ENT_OID	IN SG_BIOENTRY_ASSOC.TGT_ENT_OID%TYPE DEFAULT NULL,
		SRC_ENT_OID	IN SG_BIOENTRY_ASSOC.SRC_ENT_OID%TYPE DEFAULT NULL,
		Ont_NAME	IN SG_ONTOLOGY_TERM.NAME%TYPE DEFAULT NULL,
		Ont_IDENTIFIER	IN SG_ONTOLOGY_TERM.IDENTIFIER%TYPE DEFAULT NULL,
		Tgt_Ent_ACCESSION	IN SG_BIOENTRY.ACCESSION%TYPE DEFAULT NULL,
		Tgt_Ent_VERSION	IN SG_BIOENTRY.VERSION%TYPE DEFAULT NULL,
		Tgt_DB_OID	IN SG_BIOENTRY.DB_OID%TYPE DEFAULT NULL,
		Tgt_Ent_IDENTIFIER	IN SG_BIOENTRY.IDENTIFIER%TYPE DEFAULT NULL,
		Src_Ent_ACCESSION	IN SG_BIOENTRY.ACCESSION%TYPE DEFAULT NULL,
		Src_Ent_VERSION	IN SG_BIOENTRY.VERSION%TYPE DEFAULT NULL,
		Src_DB_OID	IN SG_BIOENTRY.DB_OID%TYPE DEFAULT NULL,
		Src_Ent_IDENTIFIER	IN SG_BIOENTRY.IDENTIFIER%TYPE DEFAULT NULL,
		do_DML		IN NUMBER DEFAULT BSStd.DML_NO)
RETURN SG_BIOENTRY_ASSOC.OID%TYPE
IS
	pk	SG_BIOENTRY_ASSOC.OID%TYPE DEFAULT NULL;
	EntA_row EntA_c%ROWTYPE;
	ONT_OID_	SG_ONTOLOGY_TERM.OID%TYPE DEFAULT ONT_OID;
	TGT_ENT_OID_	SG_BIOENTRY.OID%TYPE DEFAULT TGT_ENT_OID;
	SRC_ENT_OID_	SG_BIOENTRY.OID%TYPE DEFAULT SRC_ENT_OID;
BEGIN
	-- initialize
	IF (do_DML > BSStd.DML_NO) THEN
		pk := EntA_OID;
	END IF;
	-- look up
	IF do_DML = BSStd.DML_NO THEN
		-- look up SG_ONTOLOGY_TERM
		IF (ONT_OID_ IS NULL) THEN
			ONT_OID_ := Ont.get_oid(
				Ont_NAME => Ont_NAME,
				Ont_IDENTIFIER => Ont_IDENTIFIER);
		END IF;
		-- look up SG_BIOENTRY
		IF (TGT_ENT_OID_ IS NULL) THEN
			TGT_ENT_OID_ := Ent.get_oid(
				Ent_ACCESSION  => Tgt_Ent_ACCESSION,
				Ent_VERSION    => Tgt_Ent_VERSION,
				DB_OID	       => Tgt_DB_OID,
				Ent_IDENTIFIER => Tgt_Ent_IDENTIFIER);
		END IF;
		-- look up SG_BIOENTRY
		IF (SRC_ENT_OID_ IS NULL) THEN
			SRC_ENT_OID_ := Ent.get_oid(
				Ent_ACCESSION  => Src_Ent_ACCESSION,
				Ent_VERSION    => Src_Ent_VERSION,
				DB_OID	       => Src_DB_OID,
				Ent_IDENTIFIER => Src_Ent_IDENTIFIER);
		END IF;
		-- look up
		FOR EntA_row IN EntA_c (Ont_Oid_, 
				        Src_Ent_Oid_, Tgt_Ent_Oid_) LOOP
		        pk := EntA_row.OID;
		END LOOP;
	END IF;
	-- insert if requested (no update)
	IF (pk IS NULL) AND 
	   ((do_DML = BSStd.DML_I) OR (do_DML = BSStd.DML_UI)) THEN
	    	-- look up foreign keys if not provided:
		-- look up SG_ONTOLOGY_TERM
		IF (ONT_OID_ IS NULL) THEN
			ONT_OID_ := Ont.get_oid(
				Ont_NAME => Ont_NAME,
				Ont_IDENTIFIER => Ont_IDENTIFIER);
		END IF;
		IF (ONT_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ont <' || Ont_NAME || '|' || Ont_IDENTIFIER || '>');
		END IF;
		-- look up SG_BIOENTRY
		IF (TGT_ENT_OID_ IS NULL) THEN
			TGT_ENT_OID_ := Ent.get_oid(
				Ent_ACCESSION  => Tgt_Ent_ACCESSION,
				Ent_VERSION    => Tgt_Ent_VERSION,
				DB_OID	       => Tgt_DB_OID,
				Ent_IDENTIFIER => Tgt_Ent_IDENTIFIER);
		END IF;
		IF (TGT_ENT_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ent <' || Tgt_Ent_ACCESSION || '|' || Tgt_Ent_VERSION || '|' || Tgt_DB_OID || '|' || Tgt_Ent_IDENTIFIER || '>');
		END IF;
		-- look up SG_BIOENTRY
		IF (SRC_ENT_OID_ IS NULL) THEN
			SRC_ENT_OID_ := Ent.get_oid(
				Ent_ACCESSION  => Src_Ent_ACCESSION,
				Ent_VERSION    => Src_Ent_VERSION,
				DB_OID	       => Src_DB_OID,
				Ent_IDENTIFIER => Src_Ent_IDENTIFIER);
		END IF;
		IF (SRC_ENT_OID_ IS NULL) THEN
			raise_application_error(-20101,
				'failed to look up Ent <' || Src_Ent_ACCESSION || '|' || Src_Ent_VERSION || '|' || Src_DB_OID || '|' || Src_Ent_IDENTIFIER || '>');
		END IF;
	    	-- insert the record and obtain the primary key
	    	pk := do_insert(
		        ONT_OID => ONT_OID_,
			TGT_ENT_OID => TGT_ENT_OID_,
			SRC_ENT_OID => SRC_ENT_OID_);
	END IF;
	-- return the primary key
	RETURN pk;
END;

FUNCTION do_insert(
		ONT_OID	IN SG_BIOENTRY_ASSOC.ONT_OID%TYPE,
		TGT_ENT_OID	IN SG_BIOENTRY_ASSOC.TGT_ENT_OID%TYPE,
		SRC_ENT_OID	IN SG_BIOENTRY_ASSOC.SRC_ENT_OID%TYPE)
RETURN SG_BIOENTRY_ASSOC.OID%TYPE 
IS
	pk	SG_BIOENTRY_ASSOC.OID%TYPE;
BEGIN
	-- pre-generate the primary key value
	SELECT SG_Sequence.nextval INTO pk FROM DUAL;
	-- insert the record
	INSERT INTO SG_BIOENTRY_ASSOC (
		OID,
		ONT_OID,
		TGT_ENT_OID,
		SRC_ENT_OID)
	VALUES (pk,
		ONT_OID,
		TGT_ENT_OID,
		SRC_ENT_OID)
	;
	-- return the new pk value
	RETURN pk;
END;

END EntA;
/

